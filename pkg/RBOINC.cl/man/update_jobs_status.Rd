% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getResult.R
\name{update_jobs_status}
\alias{update_jobs_status}
\title{update_jobs_status}
\usage{
update_jobs_status(connection, jobs_status, callback_function = NULL)
}
\arguments{
\item{connection}{a connection created by create_connection.}

\item{jobs_status}{a list returned by create_jobs, create_n_jobs or update_jobs_status.}

\item{callback_function}{a function that is called for each result after loading. This
function must take one argument, which is the result of the work performed. The value
returned by this function is placed in the result list.}
}
\value{
a list with current states of jobs. This list contains the following fields:
\itemize{
\item jobs_name - a name of job on BOINC server;
\item results - computation results (NULL if computation is still incomplete). The length of this list is equal to the
length of the data;
\item jobs_status - jobs human-readable status for each job;
\item jobs_code - jobs status code, don't use this field;
\item status - computation status, may be:
\itemize{
\item "initialization" - jobs have been submitted to the server, but their status was not requested by update_jobs_status.
\item "in_progress" - BOINC serves jobs.
\item "done" - computations are complete, the result was downloaded.
\item "error" - an error occurred during the job processing.
\item "queued" - job in the queue (only for http/https connections).
}
}
}
\description{
Update status for jobs and get result for complete jobs.
}
\details{
When errors occur, execution can be stopped with the following messages:
\itemize{
\item for unknown connections:
\itemize{
\item "Unknown protocol."
}
\item for any connection:
\itemize{
\item "The number of tasks must be greater than 0."
This function can output the following warnings:
}
\item for any connection:
\itemize{
\item Failed to download the result: "<error message>"
}
}
}
\examples{
\dontrun{
# import library
library(RBOINC.cl)
# function for data processing
fun = function(val)
{
  return(val * a + b)
}
# global variables
glob_vars = list(a = 3, b = 2)
# Initialization function. This function runs on each node for one times.
init = function()
{
  return(NULL)
}
# data for processing
data = list(matrix(rexp(15), 3,5), matrix(rexp(15), 3,5))

#callback function
print_func = function(val)
{
  print(val)
  # May be any value
  return(val)
  #return(NULL)
}

# Test jobs before sending
jobs_t = test_jobs(fun, data, init, glob_vars, callback_function = print_func)
jobs_t
jobs_t = test_n_jobs(fun, data, 1, init, glob_vars, callback_function = print_func)
jobs_t

# Create connection:
#con = create_connection("ssh://boinc.local", "~/projects/myproject", "boincadm", "0000") # ssh
#con = create_connection("http://boinc.local", "myproject", "submitter@example.com","000000")# http
con
# send jobs:
#jobs = create_jobs(con, fun, data, init, glob_vars)
#jobs = create_n_jobs(con, fun, data, 1, init, glob_vars)
jobs
# Get jobs status. Run this until status not equal "done":
jobs = update_jobs_status(con, jobs)
jobs
# Close connection:
close_connection(con)
}
}
