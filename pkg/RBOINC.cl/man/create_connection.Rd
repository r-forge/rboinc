% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connection.R
\name{create_connection}
\alias{create_connection}
\title{create_connection}
\usage{
create_connection(
  server,
  dir = "~/projects/rboinc",
  username,
  password = NULL,
  keyfile = NULL
)
}
\arguments{
\item{server}{an ssh or http server URL of the form <protocol>://<server name>:<port>. Examples:
\itemize{
\item "ssh://boinc-server.local" - for ssh connection;
\item "http://boinc-server.local" - for http connection;
\item "https://boinc-server.local" - for https connection.
}}

\item{dir}{a rboinc project directory on the server. For ssh connection, this is the directory where the BOINC project is located.
For http/https connection, this is the full path to the project page (without the server name).}

\item{username}{a string containing username. For ssh connection, this is the user login. For http/https connection, this is
the user email.}

\item{password}{a string containing user password.If this parameter is equal to NULL, then a window will be displayed prompting you
to enter the password}

\item{keyfile}{path to a private key file. For ssh connection only.}
}
\value{
a connection (list) for use by other functions.

When errors occur, execution can be stopped with the following messages:
\itemize{
\item for any connections:
\itemize{
\item "Unsupported server address format."
\item "Connection was canceled by user."
\item "Unrecognized protocol: "<protocol>""
}
\item for http/https connections:
\itemize{
\item "Authorization failed."
}
\item for ssh connections:
\itemize{
\item "Project directory was not found on server."
\item Other exceptions thrown by ssh_connect.
}
}
}
\description{
Create an ssh or http/https connection to the BOINC server.
}
\examples{
\dontrun{
# import library
library(RBOINC.cl)
# function for data processing
fun = function(val)
{
  return(val * a + b)
}
# global variables
glob_vars = list(a = 3, b = 2)
# Initialization function. This function runs on each node for one times.
init = function()
{
  return(NULL)
}
# data for processing
data = list(matrix(rexp(15), 3,5), matrix(rexp(15), 3,5))

#callback function
print_func = function(val)
{
  print(val)
  # May be any value
  return(val)
  #return(NULL)
}

# Test jobs before sending
jobs_t = test_jobs(fun, data, init, glob_vars, c("httr", "xml2"), callback_function = print_func)
jobs_t
jobs_t = test_n_jobs(fun, data, 1, init, glob_vars, c("httr", "xml2"), callback_function = print_func)
jobs_t

# Create connection:
#con = create_connection("ssh://boinc-server.local", dir = "~/projects/myproject", username = "boincadm", password = "0000") # ssh
#con = create_connection("http://boinc-server.local", dir = "myproject", username = "submitter@example.com", password = "000000")# http
con
# send jobs:
#jobs = create_jobs(con, fun, data, init, glob_vars)
#jobs = create_n_jobs(con, fun, data, 1, init, glob_vars)
jobs
# Get jobs status. Run this until status not equal "done":
jobs = update_jobs_status(con, jobs)
jobs
# Close connection:
close_connection(con)
}
}
