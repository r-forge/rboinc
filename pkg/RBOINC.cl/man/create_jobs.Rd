% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createJob.R
\name{create_jobs}
\alias{create_jobs}
\title{create_jobs}
\usage{
create_jobs(
  connection,
  work_func,
  data,
  init_func = NULL,
  global_vars = NULL,
  packages = c(),
  files = c()
)
}
\arguments{
\item{connection}{a connection created by create_connection.}

\item{work_func}{data processing function.}

\item{data}{data for processing.  Must be a list!!!}

\item{init_func}{initialization function.}

\item{global_vars}{a list in the format <variable name>=<value>.}

\item{packages}{a string vector with imported packages names.}

\item{files}{a string vector with the filenames that should be available for jobs.}
}
\value{
a list with current states of jobs. This list contains the following fields:
\itemize{
\item jobs_name - a name of job on BOINC server;
\item results - computation results (NULL if computation is still incomplete);
\item jobs_status - jobs human-readable status for each job;
\item jobs_code - jobs status code, don't use this field;
\item status - computation status, may be:
\itemize{
\item "initialization" - jobs have been submitted to the server, but their status was not requested by update_jobs_status.
\item "in_progress" - BOINC serves jobs.
\item "done" - computations are complete, the result was downloaded.
\item "error" - an error occurred during the job processing.
\item "queued" - job in the queue (only for http/https connections).
}
}

When errors occur, the following exceptions may be thrown:
\itemize{
\item for http connections:
\itemize{
\item You can not create jobs.
\item BOINC server error: "<server message>".
}
}
}
\description{
Send job to BOINC server for parallel processing.
}
\examples{
# import library
library(RBOINC.cl)
# function for processing data
fun = function(val)
{
  return(val * a + b)
}
# global variables
glob_vars = list(a = 3)
# initialize function
init = function()
{
  b <<- 2
}
# data for processing
data = list(matrix(rexp(15), 3,5), matrix(rexp(15), 3,5))

#callback function
print_func = function(val)
{
  print(val)
  # May be any value
  return(val)
  #return(NULL)
}

# Test jobs before sending
jobs_t = test_jobs(fun, data, init, glob_vars, c("httr", "xml2"), callback_function = print_func)
jobs_t

# Create connection:
#con = create_connection("ssh://boinc-server.local", dir = "~/projects/myproject", username = "boincadm", password = "0000") # ssh
#con = create_connection("http://boinc-server.local", dir = "myproject", username = "submitter@example.com", password = "000000")# http
con
# send jobs:
jobs = create_jobs(con, fun, data, init, glob_vars)
jobs
# Get jobs status. Run this until status not equal "done":
jobs = update_jobs_status(con, jobs)
jobs
# Close connection:
close_connection(con)
}
