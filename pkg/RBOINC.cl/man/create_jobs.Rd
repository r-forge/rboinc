% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createJob.R
\name{create_jobs}
\alias{create_jobs}
\title{create_jobs}
\usage{
create_jobs(
  connection,
  work_func,
  data = NULL,
  n = NULL,
  init_func = NULL,
  global_vars = NULL,
  packages = c(),
  files = c(),
  install_func = NULL
)
}
\arguments{
\item{connection}{a connection returned by
\link[=create_connection]{create_connection}.}

\item{work_func}{data processing function with prototype
\code{function(data_element)} if 'data' is specified or \code{function()} if
'n' is specified. This function runs for each element in data. This function
can be recursive.}

\item{data}{data for processing.  Must be a numerable list or vector.}

\item{n}{a number of jobs. This parameter must be less than or equal to the
length of the data. If not specified, then the number of jobs will be equal
to the length of the data.}

\item{init_func}{initialization function with prototype \code{function()}.
This function runs once at the start of a job before the job is split into
separate threads. This function can not to be recursive.}

\item{global_vars}{a list in the format
\code{<}variable name\code{>}=\code{<}value\code{>}.}

\item{packages}{a string vector with imported packages names.}

\item{files}{a string vector with the files names that should be available
for jobs.}

\item{install_func}{installation function with prototype
\code{function(packages)}, where packages is a vector with package names
which cannot be installed from repositories. This function can not to be
recursive.}
}
\value{
a list with current states of jobs. This list contains the following
fields:
\itemize{
\item batch_id - ID of the batch that includes the jobs;
\item jobs_name - a name of jobs on BOINC server;
\item results - computation results (NULL if computation is still incomplete);
The length of this list is equal to the length of the data;
\item jobs_status - human-readable status for each job;
\item status - computation status, may be:
\itemize{
\item "initialization" - jobs have been submitted to the server, but their
status was not requested by update_jobs_status;
\item "in_progress" - BOINC serves jobs;
\item "done" - computations are complete, the results were downloaded;
\item "warning" a recoverable error occurred during the job processing;
\item "error" - a serious error occurred during the job processing;
\item "aborted" - processing was canceled using the
\link[=cancel_jobs]{cancel_jobs} function.
}
}
}
\description{
Creates a jobs on BOINC server.
}
\details{
This function automatically breaks the data into n parts and creates n jobs.
The number of jobs must be greater than zero.

Parameter init_func is necessary for additional initialization, for example,
for compiling C++ functions from sources transferred through files parameter.
It runs for all computation nodes but not for main node.

The job is performed as follows:
\enumerate{
\item The necessary \code{packages} are first loaded/installed;
\item If some packages were not installed, the
\code{RBOINC_additional_inst_func} function is called which is renamed
\code{install_func}.
\item The \code{RBOINC_work_func} and \code{RBOINC_init_func} functions are
loaded which are renamed \code{work_func} and \code{init_func};
\item The \code{RBOINC_data} object is loaded which is renamed part of
\code{data};
\item The working folder changes to the one where the \code{files} were copied;
\item According to the number of detected cores, a cluster is created with the
name "RBOINC_cluster"
\item The \link[doParallel:registerDoParallel]{registerDoParallel(RBOINC_cluster)}
function is called;
\item The original name of the \code{RBOINC_work_func} function is restored;
\item \code{global_vars} are copied to the global environment;
\item The \code{RBOINC_init_func()} function is called;
\item The job is divided into sub-tasks and is performed in parallel.
\item Execution results are collected together and sent to the BOINC server.
}
\subsection{Restrictions}{

Don't create or use objects that begin with the prefix \code{RBOINC_}.

Don't rely on any packages to be loaded automatically. Specify the necessary
packages explicitly through the \code{packages} parameter.

Don't pass in global_vars objects that cannot be saved, such as functions
compiled from C++ code.

Packages passed in \code{packages} will be installed from the repositories
specified in your R environment. Additionally, https://cloud.r-project.org is
added to the list of repositories. Only CRAN-like repositories are supported.

Packages that require compilation may depend on header files and libraries
that are not in the VM. Such packages cannot be installed in the standard
way.

init_func is only called on processing nodes created by makeCluster. if
nothing is being processed in the master node, it will not be called in
master node.

install_func is always called. As a parameter, it is passed a vector of
strings with the names of packages for which the installation failed a
parameter equal to the vector with names of packages installation of that is
failed. If you need to use functions from packages passed to \code{packages},
then refer to them with a colon.
}

\subsection{Errors and warnings}{

When errors occur, execution can be stopped with the following messages:
\itemize{
\item for http connections:
\itemize{
\item "You can not create jobs."
\item "BOINC server error: "\code{<}server message\code{>}"."
}
\item for unknown connections:
\itemize{
\item "Unknown protocol."
}
\item for any connection:
\itemize{
\item "The number of tasks must be greater than 0."
\item "The number of tasks must be less than or equal to the length of the data."
\item "Archive making error: \code{<}error message\code{>}"
\item "You must specify 'data' or 'n'."
}
}
}
}
\examples{
\dontrun{

# Function for data processing:
fun = function(val)
{
   ...
}

# Data for processing:
data = list(...)

# Connection to the BOINC server:
con = create_connection(...)

# Send jobs to BOINC server:
jobs = create_jobs(con, fun, data)

# Get status for jobs:
jobs = update_jobs_status(con, jobs)

# Release resources:
close_connection(con)
}
}
