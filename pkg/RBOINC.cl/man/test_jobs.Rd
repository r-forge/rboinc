% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testAPI.R
\name{test_jobs}
\alias{test_jobs}
\title{test_jobs}
\usage{
test_jobs(
  work_func,
  data,
  n = NULL,
  init_func = NULL,
  global_vars = NULL,
  packages = c(),
  files = c(),
  callback_function = NULL
)
}
\arguments{
\item{work_func}{data processing function with prototype
\code{function(data_element)}. This function runs for each element in data.
This function can be recursive.}

\item{data}{data for processing.  Must be a numerable list or vector.}

\item{n}{a number of jobs. This parameter must be less than or equal to the
length of the data. If not specified, then the number of jobs will be equal
to the length of the data.}

\item{init_func}{initialization function with prototype \code{function()}.
This function runs once at the start of a job before the job is split into
separate threads. This function can not to be recursive.}

\item{global_vars}{a list in the format
\code{<}variable name\code{>}=\code{<}value\code{>}.}

\item{packages}{a string vector with imported packages names.}

\item{files}{a string vector with the files names that should be available
for jobs.}

\item{callback_function}{a function with prototype
\code{function(result_element)} that is called for each result after loading.
The value returned by this function is placed in the result list.}
}
\value{
a list with states of jobs. This list contains the following fields:
\itemize{
\item log - Rscript output;
\item result - computation result.
}
}
\description{
performing jobs locally.
}
\details{
Like \link[=create_jobs]{create_jobs}, it creates a jobs for the BOINC server
but does not submit them. Instead, it runs all jobs locally and generates a
report at each step. This function is intended for debugging applications
that use RBOINC. Files created by this function are not deleted after its
completion.
\subsection{Errors and warnings}{

When errors occur, execution can be stopped with the following messages:
\itemize{
\item "Archive making error: \code{<}error message\code{>}"
}
}
}
\examples{
\dontrun{

# Function for data processing:
fun = function(val)
{
   ...
}

# Data for processing:
data = list(...)

# Test jobs locally:
res = test_jobs(fun, data)

}
}
